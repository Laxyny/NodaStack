name: .NET Core Desktop

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create a release"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: NodaStack.sln

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Setup MSBuild.exe
        uses: microsoft/setup-msbuild@v2

      - name: Restore dependencies
        run: dotnet restore $env:Solution_Name

      - name: Update project version
        shell: pwsh
        run: |
          $VERSION = "$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}"
          echo "Setting version to $VERSION"
          
          $csprojPath = "NodaStack.csproj"
          $csproj = Get-Content $csprojPath -Raw
          $csproj = $csproj -replace '<Version>.*?</Version>', "<Version>$VERSION</Version>"
          $csproj = $csproj -replace '<AssemblyVersion>.*?</AssemblyVersion>', "<AssemblyVersion>$VERSION</AssemblyVersion>"
          $csproj = $csproj -replace '<FileVersion>.*?</FileVersion>', "<FileVersion>$VERSION</FileVersion>"
          Set-Content -Path $csprojPath -Value $csproj
          
          echo "Version updated in project file"

      - name: Build the application
        run: dotnet build $env:Solution_Name --configuration $env:Configuration --no-restore
        env:
          Configuration: ${{ matrix.configuration }}

      - name: Run tests
        run: dotnet test --no-build --configuration ${{ matrix.configuration }} --logger trx
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: NodaStack-${{ matrix.configuration }}
          path: bin/${{ matrix.configuration }}/net9.0-windows/
          retention-days: 90

      - name: Create release package (Release only)
        if: matrix.configuration == 'Release'
        run: |
          mkdir release
          xcopy "bin\Release\net9.0-windows\*" "release\" /E /H /Y

          echo NodaStack Build ${{ github.run_number }} > release/BUILD_INFO.txt
          echo Commit: ${{ github.sha }} >> release/BUILD_INFO.txt
          echo Date: %date% %time% >> release/BUILD_INFO.txt

          7z a NodaStack-Release.zip release\*

      - name: Create MSI installer (Release only)
        if: matrix.configuration == 'Release'
        shell: pwsh
        run: |
          if (Get-Command "makensis" -ErrorAction SilentlyContinue) {
            $nsisScript = "OutFile `"NodaStack-Setup.exe`"`n" +
                          "InstallDir `"`$PROGRAMFILES\NodaStack`"`n" +
                          "Page directory`n" +
                          "Page instfiles`n" +
                          "Section`n" +
                          "  SetOutPath `"`$INSTDIR`"`n" +
                          "  File /r `"bin\Release\net9.0-windows\*`"`n" +
                          "  CreateShortcut `"`$DESKTOP\NodaStack.lnk`" `"`$INSTDIR\NodaStack.exe`"`n" +
                          "SectionEnd"
            Set-Content -Path "installer.nsi" -Value $nsisScript -Encoding UTF8;
            makensis installer.nsi;
          } else {
            Write-Host "NSIS not available, skipping installer creation"
          }

      - name: Upload release package
        if: matrix.configuration == 'Release'
        uses: actions/upload-artifact@v4
        with:
          name: NodaStack-Release-Package
          path: NodaStack-Release.zip

      - name: Upload installer
        if: matrix.configuration == 'Release' && hashFiles('NodaStack-Setup.exe') != ''
        uses: actions/upload-artifact@v4
        with:
          name: NodaStack-Installer
          path: NodaStack-Setup.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: FTP_SERVER

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          VERSION="v$(date +'%Y.%m.%d').${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          CHANGELOG=$(git log --oneline --since="7 days ago" --pretty=format:"- %s (%h)")
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download Release Package
        uses: actions/download-artifact@v4
        with:
          name: NodaStack-Release-Package
          path: ./release-assets/

      - name: Download Installer (if exists)
        uses: actions/download-artifact@v4
        with:
          name: NodaStack-Installer
          path: ./release-assets/
        continue-on-error: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag_name }}
          name: NodaStack ${{ steps.version.outputs.version }}
          body: |
            ## 🚀 NodaStack Release ${{ steps.version.outputs.version }}

            ### 📝 What's New
            ${{ steps.changelog.outputs.changelog }}

            ### 📥 Installation Options
            - **📦 Portable Version:** [NodaStack-Release.zip](./NodaStack-Release.zip)
            - **💾 Windows Installer:** [NodaStack-Setup.exe](./NodaStack-Setup.exe) *(if available)*

            ### ⚡ Requirements
            - Windows 10/11 (x64)
            - .NET 9 Runtime (auto-installed with installer)
            - Docker Desktop (for development)

            ### 🔧 Features
            - Modern WPF interface
            - Apache, PHP, MySQL management
            - Docker containers integration
            - Real-time status monitoring
            - Project management tools

            ### 📊 Build Information
            - **Build Number:** ${{ github.run_number }}
            - **Commit:** `${{ github.sha }}`
            - **Branch:** `${{ github.ref_name }}`
            - **Date:** $(date -u)

            ---
            **Recommended:** Download the portable version for quick setup! 🎯
          files: ./release-assets/*
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate latest.json
        run: |
          cat > ./release-assets/latest.json << EOF
          {
            "version": "${{ steps.version.outputs.version }}",
            "releaseDate": "$(date -u +'%Y-%m-%dT%H:%M:%SZ')",
            "releaseNotesUrl": "${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag_name }}",
            "downloadUrl": "${{ github.server_url }}/${{ github.repository }}/releases/download/${{ steps.version.outputs.tag_name }}/NodaStack-Setup.exe"
          }
          EOF
          cat ./release-assets/latest.json

      - name: Upload files via SFTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: sftp
          port: 22
          local-dir: ./release-assets/
          server-dir: /Nodasys-Softwares/NodaStack/
          dangerous-clean-slate: true